import React, { Component } from 'react';
import CanvasJSReact from '@canvasjs/react-charts';

const CanvasJSChart = CanvasJSReact.CanvasJSChart;

class VulnerabilityChart extends Component {
  constructor(props) {
    super(props);
    this.addSymbols = this.addSymbols.bind(this);
  }

  addSymbols(e) {
    const suffixes = ["", "K", "M", "B"];
    let order = Math.max(Math.floor(Math.log(Math.abs(e.value)) / Math.log(1000)), 0);

    if (order > suffixes.length - 1) order = suffixes.length - 1;

    const suffix = suffixes[order];
    return CanvasJSReact.CanvasJS.formatNumber(e.value / Math.pow(1000, order)) + suffix;
  }

  render() {
    const { title, data } = this.props; // Destructure props

    const options = {
      animationEnabled: true,
      theme: "light2",
      title: {
        text: title
      },
      axisY: {
        title: "Number of Reported Incidents",
        labelFormatter: this.addSymbols,
        scaleBreaks: {
          autoCalculate: true
        }
      },
      axisX: {
        title: "Vulnerability Types",
        labelAngle: -30
      },
      data: [
        {
          type: "column",
          name: "Web Scraping Vulnerabilities",
          showInLegend: true,
          dataPoints: data // Use data from props
        }
      ]
    };

    return (
      <div style={{ margin: '20px', width: '90%', maxWidth: '800px' }}>
        <CanvasJSChart options={options} onRef={ref => (this.chart = ref)} />
      </div>
    );
  }
}

export default VulnerabilityChart;
