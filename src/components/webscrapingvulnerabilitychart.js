import React, { Component } from 'react';
import CanvasJSReact from '@canvasjs/react-charts'; // Import CanvasJS for React

const CanvasJSChart = CanvasJSReact.CanvasJSChart;

class WebScrapingVulnerabilityChart extends Component {
  constructor() {
    super();
    this.addSymbols = this.addSymbols.bind(this);
  }

  addSymbols(e) {
    const suffixes = ["", "K", "M", "B"];
    let order = Math.max(Math.floor(Math.log(Math.abs(e.value)) / Math.log(1000)), 0);

    if (order > suffixes.length - 1) order = suffixes.length - 1;

    const suffix = suffixes[order];
    return CanvasJSReact.CanvasJS.formatNumber(e.value / Math.pow(1000, order)) + suffix;
  }

  render() {
    const options = {
      animationEnabled: true,
      theme: "light1", // Theme options: "light1", "light2", "dark1", "dark2"
      title: {
        text: "Common Web Scraping Vulnerabilities - 2023"
      },
      axisY: {
        title: "Number of Reported Incidents",
        labelFormatter: this.addSymbols,
        scaleBreaks: {
          autoCalculate: true
        }
      },
      axisX: {
        title: "Vulnerability Types",
        labelAngle: -30
      },
      data: [
        {
          type: "column",
          name: "Web Scraping Vulnerabilities",
          showInLegend: true,
          dataPoints: [
            { label: "Injection Attacks", y: 1250 }, // SQL, NoSQL, etc.
            { label: "Data Leakage", y: 1850 }, // Exposing sensitive data
            { label: "Rate Limiting Bypass", y: 1450 }, // Circumventing request limits
            { label: "Unauthorized API Access", y: 980 }, // Using APIs without proper authentication
            { label: "Captcha Circumvention", y: 670 }, // Bypassing Captcha mechanisms
            { label: "IP Blocking Evasion", y: 720 }, // Avoiding IP-based blocking
            { label: "Malicious Bots", y: 1050 }, // Automated bots scraping data
            { label: "User-Agent Spoofing", y: 850 }, // Mimicking legitimate browsers
            { label: "Session Hijacking", y: 540 }, // Taking over valid user sessions
            { label: "Header Manipulation", y: 625 }, // Altering HTTP headers for access
            { label: "Cookie Theft", y: 450 } // Stealing session cookies for unauthorized access
          ]
        }
      ]
    };

    return (
      <div>
        <CanvasJSChart options={options} onRef={ref => (this.chart = ref)} />
      </div>
    );
  }
}

export default WebScrapingVulnerabilityChart;
