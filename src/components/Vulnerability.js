import React, { useState } from 'react';
import Search from './search';

const initialVulnerabilities = [
  { name: "Injection Attacks", detail: "SQL, NoSQL, and other injection attacks where malicious input is executed by the server.", severity: "High" },
  { name: "Data Leakage", detail: "Unintended exposure of sensitive data due to improper security measures.", severity: "Critical" },
  { name: "Rate Limiting Bypass", detail: "Circumventing rate limits set by the server to avoid being blocked or throttled.", severity: "High" },
  { name: "Unauthorized API Access", detail: "Accessing APIs without proper authentication or authorization.", severity: "Critical" },
  { name: "Captcha Circumvention", detail: "Bypassing Captcha mechanisms designed to prevent automated access.", severity: "High" },
  { name: "IP Blocking Evasion", detail: "Avoiding IP-based blocking mechanisms to continue scraping.", severity: "Moderate" },
  { name: "Malicious Bots", detail: "Automated bots used to scrape data with malicious intent.", severity: "High" },
  { name: "Session Hijacking", detail: "Intercepting and using a valid session to gain unauthorized access.", severity: "Critical" },
  { name: "Cross-Site Scripting (XSS)", detail: "Injecting malicious scripts into webpages to exploit vulnerabilities.", severity: "High" },
  { name: "Data Scraping Without Consent", detail: "Extracting data from websites without permission, violating terms of service.", severity: "Moderate" },
  { name: "API Abuse", detail: "Abusing APIs to overload or misuse them beyond intended use.", severity: "High" },
  { name: "Misconfigured Security Settings", detail: "Incorrect security configurations leading to vulnerabilities.", severity: "Critical" },
  { name: "Unvalidated Redirects", detail: "Exploiting unvalidated redirects to direct users to malicious sites.", severity: "High" },
  { name: "Insecure Direct Object References (IDOR)", detail: "Accessing objects without proper authorization checks.", severity: "Critical" },
  { name: "Brute Force Attacks", detail: "Automated attempts to guess credentials or other sensitive information.", severity: "High" },
  { name: "Broken Authentication", detail: "Flaws in authentication mechanisms leading to unauthorized access.", severity: "Critical" },
  { name: "Unsecured Endpoints", detail: "APIs or endpoints not properly secured, exposing sensitive data.", severity: "High" },
  { name: "Insufficient Logging and Monitoring", detail: "Lack of proper logging and monitoring to detect and respond to attacks.", severity: "Moderate" },
  { name: "Insecure Data Storage", detail: "Storing sensitive data in an insecure manner, prone to leaks.", severity: "High" },
  { name: "Insecure Communications", detail: "Data transmitted without encryption or proper security measures.", severity: "Critical" },
  { name: "Improper Error Handling", detail: "Errors exposed to users providing information useful for attacks.", severity: "Moderate" },
  // Add more rows as needed
];

const Vulnerability = () => {
  const [filteredVulnerabilities, setFilteredVulnerabilities] = useState(initialVulnerabilities);

  const handleSearch = (query) => {
    if (query) {
      setFilteredVulnerabilities(initialVulnerabilities.filter(vuln =>
        vuln.name.toLowerCase().includes(query.toLowerCase()) ||
        vuln.detail.toLowerCase().includes(query.toLowerCase())
      ));
    } else {
      setFilteredVulnerabilities(initialVulnerabilities);
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto mt-20">
      <h1 className="text-4xl font-bold mb-6 text-center">Web Scraping Vulnerabilities</h1>
      <Search onSearch={handleSearch} />
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
          <thead className="bg-gray-800 text-white">
            <tr>
              <th className="px-6 py-3 text-left">Vulnerability Name</th>
              <th className="px-6 py-3 text-left">Detail</th>
              <th className="px-6 py-3 text-left">Severity</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {filteredVulnerabilities.map((vuln, index) => (
              <tr key={index} className="transition duration-500 ease-in-out transform hover:scale-105 hover:bg-gray-100">
                <td className="px-6 py-4">{vuln.name}</td>
                <td className="px-6 py-4">{vuln.detail}</td>
                <td className={`px-6 py-4 ${vuln.severity === 'Critical' ? 'text-red-500' : vuln.severity === 'High' ? 'text-orange-500' : 'text-yellow-500'}`}>
                  {vuln.severity}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Vulnerability;
